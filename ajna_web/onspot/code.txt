import pyttsx3 as p
import speech_recognition as sr
import google.generativeai as genai
import requests
import re

# Initialize speech recognizer
recognizer = sr.Recognizer()

# Initialize pyttsx3 engine
engine = p.init()
state = True
conversation_history = []

system_instruction = """You are Ajna, an intelligent dietary advisor designed to assist users in making informed dietary choices. When a user presents a food object to you, follow these steps: identify the food item, analyze its nutritional content, and determine its suitability for consumption based on general health guidelines. Provide detailed nutritional information, including macronutrients and micronutrients. Offer a clear and concise recommendation on whether the user should consume the food, and explain your reasoning briefly based on the food's nutritional content and potential health impacts. Ensure your responses are short and to the point, focusing on guiding the user in maintaining a healthy diet, avoiding negative health effects, and making well-informed dietary decisions."""

system_instruction2 = """You are an intelligent text processor designed to identify food items in a given sentence. Your task is to analyze the sentence, identify and extract the names of any food items or objects that are edible (such as fruits, vegetables, or any other food items), and return only the names of these food items."""

API_URL = "https://api-inference.huggingface.co/models/microsoft/git-base"
headers = {"Authorization": "Bearer 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"}

def query(filename):
    with open(filename, "rb") as f:
        data = f.read()
    response = requests.post(API_URL, headers=headers, data=data)
    response_json = response.json()
    print(response_json[0]["generated_text"])
    return (response_json[0]["generated_text"])


def clean_text(text):
    # Remove ** and any other unwanted symbols
    cleaned_text = re.sub(r"[*_~`]", "", text)
    return cleaned_text


def speak(text):
    cleaned_text = clean_text(text)
    engine.say(cleaned_text)
    engine.runAndWait()


def do_listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        # Adjust for ambient noise and energy threshold
        recognizer.adjust_for_ambient_noise(source, duration=1)
        recognizer.energy_threshold = 300  # Adjust this threshold as needed
        print("Listening...")
        audio = recognizer.listen(source)
        
        try:
            text = recognizer.recognize_google(audio)
            print("User:", text)
            return text.lower()
        except sr.UnknownValueError:
            print("Sorry, I didn't catch that.")
            return "Sorry, I didn't catch that."
        except sr.RequestError as e:
            print("Could not request results from Google Speech Recognition service; {0}".format(e))
            return "Could not request results from Google Speech Recognition service;"

# Configure the AI assistant
genai.configure(api_key="AIzaSyANF58fvFynlOZM1DzXpWoUmin6UV99mcI")

# Set up the model
generation_config = {
    "temperature": 1,
    "top_p": 0.95,
    "top_k": 0,
    "max_output_tokens": 8192,
}

safety_settings = [
    {
        "category": "HARM_CATEGORY_HARASSMENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_HATE_SPEECH",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
    {
        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    },
]

# Object detection function
def detectobject(input_text, system_instruction2):
    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                                  generation_config=generation_config,
                                  system_instruction=system_instruction2,
                                  safety_settings=safety_settings)
    convo = model.start_chat(history=[
    ])
    convo.send_message(input_text)
    detected = convo.last.text
    return detected

# Response generation function
def reason(user_question):
    model = genai.GenerativeModel(model_name="gemini-1.5-pro-latest",
                                  generation_config=generation_config,
                                  system_instruction=system_instruction,
                                  safety_settings=safety_settings)
    convo = model.start_chat(history=conversation_history)
    convo.send_message(user_question)
    model_response = convo.last.text
    conversation_history.append({"role": "model", "parts": [model_response]})
    return model_response

# Main function to start the process
def start(path):
    response = query(path)
    detected = detectobject(response,system_instruction2)
    while state==True:
        user_question = do_listen()
        if user_question!=exit:
            ai_response = reason(user_question + " " + detected)
            print(ai_response)
            speak(ai_response)
        else:
            state==False

# Prompt user for object selection
object_choice = input("""Please select the fruit you choose to have:
1. Orange
2. Cabbage
3. Cauliflower
4. Watermelon
5. Banana
6. Strawberry
Enter the number corresponding to your choice: """)

# Mapping user input to file paths
file_paths = {
    "1": "./fruits/handorg.jpg",
    "2": "C:/Users/reddy/Desktop/onspot/fruits/cabbage.webp",
    "3": "C:/Users/reddy/Desktop/onspot/fruits/cauliflower.webp",
    "4": "C:/Users/reddy/Desktop/onspot/fruits/Watermelon.jpeg",
    "5": "C:/Users/reddy/Desktop/onspot/fruits/Banana.jpeg",
    "6": "C:/Users/reddy/Desktop/onspot/fruits/Strawberry.jpeg"
}

# Validate and start based on user choice
if object_choice in file_paths:
    start(file_paths[object_choice])
else:
    print("Please select an appropriate option.")
    speak("Please select an appropriate option.")
